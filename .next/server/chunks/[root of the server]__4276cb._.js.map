{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/lib/db.ts"],"sourcesContent":["// lib/prisma.ts\nimport { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n\n\nexport const db = prisma\n\n\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAE5C,wCAA2C,gBAAgB,MAAM,GAAG;AAG7D,MAAM,KAAK"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 168, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/lib/auth.ts"],"sourcesContent":["import NextAuth, { NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport { PrismaAdapter } from \"@next-auth/prisma-adapter\";\nimport { db } from \"./db\";\nimport { hash, compare } from \"bcrypt\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(db),\n  secret: process.env.NEXTAUTH_SECRET,\n  session: {\n    strategy: \"jwt\",\n  },\n  pages: {\n    signIn: \"/sign-in\",\n  },\n  providers: [\n    CredentialsProvider({\n      name: \"Credentials\",\n      credentials: {\n        username: {\n          label: \"Email\",\n          type: \"email\",\n          placeholder: \"jsmith@gmail.com\",\n        },\n        email: {\n          label: \"Email\",\n          type: \"email\",\n          placeholder: \"jsmith@gmail.com\",\n        },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          return null;\n        }\n\n        const exixtingUser = await db.user.findUnique({\n          where: { email: credentials?.email },\n        });\n\n        if (!exixtingUser) {\n          return null;\n        }\n\n        const passwordMatch = await compare(\n          credentials.password,\n          exixtingUser.password\n        );\n\n        if (!passwordMatch) {\n          return null;\n        }\n\n        return {\n          id: `${exixtingUser.id}`,\n          username: exixtingUser.username,\n          email: exixtingUser.email,\n        };\n      },\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n      async profile(profile: any) {\n        const hashedPassword = await hash(\n          \"temporary_password_for_google_users\",\n          10\n        );\n\n        // Перевіряємо, чи користувач уже існує\n        const existingUser = await db.user.findUnique({\n          where: { email: profile.email },\n        });\n\n        if (!existingUser) {\n          // Якщо користувач не існує, створюємо його\n          const newUser = await db.user.create({\n            data: {\n              email: profile.email,\n              username: profile.name || \"Google User\",\n              googleId: profile.sub, // Зберігаємо Google ID\n              password: hashedPassword, // Зберігаємо заглушковий пароль\n            },\n          });\n\n          // Повертаємо користувача у форматі, що відповідає NextAuth\n          return {\n            id: newUser.id.toString(),\n            name: newUser.username,\n            email: newUser.email,\n            username: newUser.username, // Додаємо username\n          };\n        }\n\n        // Якщо користувач існує, повертаємо його\n        return {\n          id: existingUser.id.toString(),\n          name: existingUser.username,\n          email: existingUser.email,\n          username: existingUser.username, // Додаємо username\n        };\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        return {\n          ...token,\n          username: user.username,\n        };\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      return {\n        ...session,\n        user: {\n          ...session.user,\n          username: token.username,\n          // accessToken: token.accessToken,\n        },\n      };\n    },\n  },\n};\n\nexport default NextAuth(authOptions);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sKAAA,CAAA,gBAAa,AAAD,EAAE,kHAAA,CAAA,KAAE;IACzB,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,UAAU;oBACR,OAAO;oBACP,MAAM;oBACN,aAAa;gBACf;gBACA,OAAO;oBACL,OAAO;oBACP,MAAM;oBACN,aAAa;gBACf;gBACA,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,eAAe,MAAM,kHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC5C,OAAO;wBAAE,OAAO,aAAa;oBAAM;gBACrC;gBAEA,IAAI,CAAC,cAAc;oBACjB,OAAO;gBACT;gBAEA,MAAM,gBAAgB,MAAM,CAAA,GAAA,qGAAA,CAAA,UAAO,AAAD,EAChC,YAAY,QAAQ,EACpB,aAAa,QAAQ;gBAGvB,IAAI,CAAC,eAAe;oBAClB,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,GAAG,aAAa,EAAE,EAAE;oBACxB,UAAU,aAAa,QAAQ;oBAC/B,OAAO,aAAa,KAAK;gBAC3B;YACF;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAC9C,MAAM,SAAQ,OAAY;gBACxB,MAAM,iBAAiB,MAAM,CAAA,GAAA,qGAAA,CAAA,OAAI,AAAD,EAC9B,uCACA;gBAGF,uCAAuC;gBACvC,MAAM,eAAe,MAAM,kHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;oBAC5C,OAAO;wBAAE,OAAO,QAAQ,KAAK;oBAAC;gBAChC;gBAEA,IAAI,CAAC,cAAc;oBACjB,2CAA2C;oBAC3C,MAAM,UAAU,MAAM,kHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;wBACnC,MAAM;4BACJ,OAAO,QAAQ,KAAK;4BACpB,UAAU,QAAQ,IAAI,IAAI;4BAC1B,UAAU,QAAQ,GAAG;4BACrB,UAAU;wBACZ;oBACF;oBAEA,2DAA2D;oBAC3D,OAAO;wBACL,IAAI,QAAQ,EAAE,CAAC,QAAQ;wBACvB,MAAM,QAAQ,QAAQ;wBACtB,OAAO,QAAQ,KAAK;wBACpB,UAAU,QAAQ,QAAQ;oBAC5B;gBACF;gBAEA,yCAAyC;gBACzC,OAAO;oBACL,IAAI,aAAa,EAAE,CAAC,QAAQ;oBAC5B,MAAM,aAAa,QAAQ;oBAC3B,OAAO,aAAa,KAAK;oBACzB,UAAU,aAAa,QAAQ;gBACjC;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,OAAO;oBACL,GAAG,KAAK;oBACR,UAAU,KAAK,QAAQ;gBACzB;YACF;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,UAAU,MAAM,QAAQ;gBAE1B;YACF;QACF;IACF;AACF;uCAEe,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE"}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { authOptions } from \"@/lib/auth\";\nimport NextAuth from \"next-auth\";\nconst handler = NextAuth(\n  authOptions\n);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EACrB,oHAAA,CAAA,cAAW"}},
    {"offset": {"line": 312, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}