{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/lib/db.ts"],"sourcesContent":["// lib/prisma.ts\nimport { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = global as unknown as { prisma: PrismaClient };\n\nexport const prisma =\n  globalForPrisma.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\n\n\nexport const db = prisma\n\n\n"],"names":[],"mappings":"AAAA,gBAAgB;;;;;AAChB;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAE5C,wCAA2C,gBAAgB,MAAM,GAAG;AAG7D,MAAM,KAAK"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/app/api/user/route.ts"],"sourcesContent":["import { db } from \"@/lib/db\";\nimport { NextResponse } from \"next/server\";\nimport { hash } from \"bcrypt\";\n\nimport * as z from \"zod\";\n\n// Define a schema for input validation\n\nconst userSchema = z.object({\n  username: z.string().min(1, \"Username is required\").max(100),\n  email: z.string().min(1, \"Email is required\").email(\"Invalid email\"),\n  password: z\n    .string()\n    .min(1, \"Password is required\")\n    .min(8, \"Password must have than 8 characters\"),\n});\n\n// =================================\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const { email, username, password } = userSchema.parse(body);\n\n    // check if email already exists\n    const existingUserByEmail = await db.user.findUnique({\n      where: { email: email },\n    });\n\n    if (existingUserByEmail) {\n      return NextResponse.json(\n        { user: null, message: \"User with this email is exists\" },\n        { status: 409 }\n      );\n    }\n\n    // check if username already exists\n    const existngUserByUsername = await db.user.findUnique({\n      where: { username: username },\n    });\n\n    if (existngUserByUsername) {\n      return NextResponse.json(\n        { user: null, message: \"User with this username is exists\" },\n        { status: 409 }\n      );\n    }\n\n    const hachedPassword = await hash(password, 10);\n    const newUser = await db.user.create({\n      data: {\n        username,\n        email,\n        password: hachedPassword,\n      },\n    });\n\n    const { password: newUserPassword, ...rest } = newUser;\n\n    console.log(newUserPassword);\n\n    return NextResponse.json(\n      { user: rest, message: \"User Created successfully\" },\n      { status: 201 }\n    );\n  } catch (error) {\n    return NextResponse.json(\n      { message: `Internal server error: ${error}` },\n      { status: 500 }\n    );\n  }\n}\n\n// ts types: Request,\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAEA;;;;;AAEA,uCAAuC;AAEvC,MAAM,aAAa,uIAAE,MAAM,CAAC;IAC1B,UAAU,uIAAE,MAAM,GAAG,GAAG,CAAC,GAAG,wBAAwB,GAAG,CAAC;IACxD,OAAO,uIAAE,MAAM,GAAG,GAAG,CAAC,GAAG,qBAAqB,KAAK,CAAC;IACpD,UAAU,uIACP,MAAM,GACN,GAAG,CAAC,GAAG,wBACP,GAAG,CAAC,GAAG;AACZ;AAIO,eAAe,KAAK,GAAY;IACrC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,WAAW,KAAK,CAAC;QAEvD,gCAAgC;QAChC,MAAM,sBAAsB,MAAM,kHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YACnD,OAAO;gBAAE,OAAO;YAAM;QACxB;QAEA,IAAI,qBAAqB;YACvB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,MAAM;gBAAM,SAAS;YAAiC,GACxD;gBAAE,QAAQ;YAAI;QAElB;QAEA,mCAAmC;QACnC,MAAM,wBAAwB,MAAM,kHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,UAAU,CAAC;YACrD,OAAO;gBAAE,UAAU;YAAS;QAC9B;QAEA,IAAI,uBAAuB;YACzB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,MAAM;gBAAM,SAAS;YAAoC,GAC3D;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,qGAAA,CAAA,OAAI,AAAD,EAAE,UAAU;QAC5C,MAAM,UAAU,MAAM,kHAAA,CAAA,KAAE,CAAC,IAAI,CAAC,MAAM,CAAC;YACnC,MAAM;gBACJ;gBACA;gBACA,UAAU;YACZ;QACF;QAEA,MAAM,EAAE,UAAU,eAAe,EAAE,GAAG,MAAM,GAAG;QAE/C,QAAQ,GAAG,CAAC;QAEZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,MAAM;YAAM,SAAS;QAA4B,GACnD;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS,CAAC,uBAAuB,EAAE,OAAO;QAAC,GAC7C;YAAE,QAAQ;QAAI;IAElB;AACF,EAEA,qBAAqB"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}