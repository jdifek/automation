{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/automation/src/lib/openaiConfig.ts"],"sourcesContent":["import OpenAI from \"openai\";\nimport dotenv from \"dotenv\";\n\ndotenv.config();\n\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n\nconst openai = new OpenAI({\n  apiKey: OPENAI_API_KEY,\n});\n\nexport default openai;\n"],"names":[],"mappings":";;;AACA;AADA;;;AAGA,uIAAA,CAAA,UAAM,CAAC,MAAM;AAEb,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AAEjD,MAAM,SAAS,IAAI,kJAAA,CAAA,UAAM,CAAC;IACxB,QAAQ;AACV;uCAEe"}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/automation/src/app/api/get-answer/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\nimport openai from \"@/lib/openaiConfig\";\nexport async function GET() {\n  return NextResponse.json({ message: \"API works!\" });\n}\n\nexport async function POST(req: Request) {\n  const { question } = await req.json();\n\n  try {\n    const completion = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [\n        { role: \"system\", content: \"You are a helpful assistant.\" },\n        { role: \"user\", content: question },\n      ],\n    });\n\n    const answer = completion.choices[0].message.content;\n    return NextResponse.json({ answer });\n  } catch (error) {\n    console.error(\"Error fetching from OpenAI\", error);\n    return NextResponse.json(\n      { error: \"Failed to fetch answer from OpenAI\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,SAAS;IAAa;AACnD;AAEO,eAAe,KAAK,GAAY;IACrC,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IAEnC,IAAI;QACF,MAAM,aAAa,MAAM,4HAAA,CAAA,UAAM,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;YACtD,OAAO;YACP,UAAU;gBACR;oBAAE,MAAM;oBAAU,SAAS;gBAA+B;gBAC1D;oBAAE,MAAM;oBAAQ,SAAS;gBAAS;aACnC;QACH;QAEA,MAAM,SAAS,WAAW,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO;QACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE;QAAO;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAqC,GAC9C;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}