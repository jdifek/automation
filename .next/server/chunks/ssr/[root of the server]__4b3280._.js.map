{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/app/auth/page.tsx"],"sourcesContent":["import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport * as z from \"zod\";\n\n// Define the validation schema\nconst formSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters long\"),\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function RegisterForm() {\n  const {\n    register,\n    formState: { errors, touchedFields },\n    handleSubmit,\n  } = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n  });\n\n  // Placeholder form handlers\n  const login = (data: FormValues) => console.log(\"Login\", data);\n  const signup = (data: FormValues) => console.log(\"Sign Up\", data);\n  const signinWithGoogle = () => console.log(\"Sign In with Google\");\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\n      <form\n        onSubmit={handleSubmit(login)}\n        className=\"w-full max-w-md p-6 bg-white shadow-md rounded-md\"\n      >\n        <h2 className=\"text-2xl font-bold text-center mb-6\">Authorization</h2>\n\n        {/* Email Field */}\n        <div className=\"mb-4\">\n          <label\n            htmlFor=\"email\"\n            className=\"block text-sm font-medium text-gray-700\"\n          >\n            Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            {...register(\"email\")}\n            className={`mt-1 w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${\n              errors.email || touchedFields.email\n                ? \"border-red-500 focus:ring-red-500\"\n                : \"focus:ring-blue-500\"\n            }`}\n          />\n          {errors.email && (\n            <p className=\"mt-1 text-sm text-red-500\">{errors.email.message}</p>\n          )}\n        </div>\n\n        {/* Password Field */}\n        <div className=\"mb-4\">\n          <label\n            htmlFor=\"password\"\n            className=\"block text-sm font-medium text-gray-700\"\n          >\n            Password\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            {...register(\"password\")}\n            className={`mt-1 w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${\n              errors.password || touchedFields.password\n                ? \"border-red-500 focus:ring-red-500\"\n                : \"focus:ring-blue-500\"\n            }`}\n          />\n          {errors.password && (\n            <p className=\"mt-1 text-sm text-red-500\">\n              {errors.password.message}\n            </p>\n          )}\n        </div>\n\n        <div className=\"flex gap-2 items-center mb-8\">\n          <button\n            type=\"submit\"\n            className=\"w-full py-2 px-4 text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            Login\n          </button>\n          <span className=\"text-sm text-gray-700\">or</span>\n          <button\n            type=\"button\"\n            onClick={handleSubmit(signup)}\n            className=\"w-full py-2 px-4 text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          >\n            Sign Up\n          </button>\n        </div>\n\n        <button\n          type=\"button\"\n          onClick={signinWithGoogle}\n          className=\"w-full py-2 px-4 text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n        >\n          Sign in with Google\n        </button>\n      </form>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AACA;AACA;AAFA;;;;;AAIA,+BAA+B;AAC/B,MAAM,aAAa,qIAAE,MAAM,CAAC;IAC1B,OAAO,qIAAE,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,qIAAE,MAAM,GAAG,GAAG,CAAC,GAAG;AAC9B;AAIe,SAAS;IACtB,MAAM,EACJ,QAAQ,EACR,WAAW,EAAE,MAAM,EAAE,aAAa,EAAE,EACpC,YAAY,EACb,GAAG,CAAA,GAAA,wKAAA,CAAA,UAAO,AAAD,EAAc;QACtB,UAAU,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAD,EAAE;IACxB;IAEA,4BAA4B;IAC5B,MAAM,QAAQ,CAAC,OAAqB,QAAQ,GAAG,CAAC,SAAS;IACzD,MAAM,SAAS,CAAC,OAAqB,QAAQ,GAAG,CAAC,WAAW;IAC5D,MAAM,mBAAmB,IAAM,QAAQ,GAAG,CAAC;IAE3C,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YACC,UAAU,aAAa;YACvB,WAAU;;8BAEV,8OAAC;oBAAG,WAAU;8BAAsC;;;;;;8BAGpD,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BACC,SAAQ;4BACR,WAAU;sCACX;;;;;;sCAGD,8OAAC;4BACC,IAAG;4BACH,MAAK;4BACJ,GAAG,SAAS,QAAQ;4BACrB,WAAW,CAAC,wEAAwE,EAClF,OAAO,KAAK,IAAI,cAAc,KAAK,GAC/B,sCACA,uBACJ;;;;;;wBAEH,OAAO,KAAK,kBACX,8OAAC;4BAAE,WAAU;sCAA6B,OAAO,KAAK,CAAC,OAAO;;;;;;;;;;;;8BAKlE,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BACC,SAAQ;4BACR,WAAU;sCACX;;;;;;sCAGD,8OAAC;4BACC,IAAG;4BACH,MAAK;4BACJ,GAAG,SAAS,WAAW;4BACxB,WAAW,CAAC,wEAAwE,EAClF,OAAO,QAAQ,IAAI,cAAc,QAAQ,GACrC,sCACA,uBACJ;;;;;;wBAEH,OAAO,QAAQ,kBACd,8OAAC;4BAAE,WAAU;sCACV,OAAO,QAAQ,CAAC,OAAO;;;;;;;;;;;;8BAK9B,8OAAC;oBAAI,WAAU;;sCACb,8OAAC;4BACC,MAAK;4BACL,WAAU;sCACX;;;;;;sCAGD,8OAAC;4BAAK,WAAU;sCAAwB;;;;;;sCACxC,8OAAC;4BACC,MAAK;4BACL,SAAS,aAAa;4BACtB,WAAU;sCACX;;;;;;;;;;;;8BAKH,8OAAC;oBACC,MAAK;oBACL,SAAS;oBACT,WAAU;8BACX;;;;;;;;;;;;;;;;;AAMT"}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/utils/supabase/server.ts"],"sourcesContent":["import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n}"],"names":[],"mappings":";;;AAAA;AACA;AADA;;;AAGO,eAAe;IACpB,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAEhC,OAAO,CAAA,GAAA,yKAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,0DAA0D;gBAC1D,wDAAwD;gBACxD,iBAAiB;gBACnB;YACF;QACF;IACF;AAEJ"}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/app/logaut/actions.ts"],"sourcesContent":["\"use server\"\nimport { createClient } from '@/utils/supabase/server'\nimport { revalidatePath } from 'next/cache'\nimport { redirect } from 'next/navigation'\n\nexport async function logout() {\n  const supabase = await createClient()\n\n  const { error } = await supabase.auth.signOut()\n\n  if (error) {\n    redirect('/error')\n  }\n\n  revalidatePath('/', 'layout')\n  redirect('/')\n}"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;AAAA;;;;;;AAEO,eAAe,uCAAI,GAAJ;IACpB,MAAM,WAAW,MAAM,CAAA,GAAA,kIAAA,CAAA,eAAY,AAAD;IAElC,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;IAE7C,IAAI,OAAO;QACT,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACX;IAEA,CAAA,GAAA,6HAAA,CAAA,iBAAc,AAAD,EAAE,KAAK;IACpB,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;AACX;;;IAXsB;;AAAA,+OAAA"}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 303, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}