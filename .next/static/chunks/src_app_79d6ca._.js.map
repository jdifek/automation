{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/app/login/actions.ts"],"sourcesContent":["\"use server\";\n\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\n\nimport { createClient } from \"@/utils/supabase/server\";\n\nexport async function login(formData: FormData) {\n  const supabase = await createClient();\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get(\"email\") as string,\n    password: formData.get(\"password\") as string,\n  };\n\n  const { error } = await supabase.auth.signInWithPassword(data);\n\n  if (error) {\n    redirect(\"/error\");\n  }\n\n  revalidatePath(\"/\", \"layout\");\n  redirect(\"/\");\n}\n\nexport async function signup(formData: FormData) {\n  const supabase = await createClient();\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get(\"email\") as string,\n    password: formData.get(\"password\") as string,\n  };\n\n  const { error } = await supabase.auth.signUp(data);\n\n  if (error) {\n    redirect(\"/error\");\n  }\n\n  revalidatePath(\"/\", \"layout\");\n  redirect(\"/\");\n}\n\nconst signInWith = (provider: \"google\") => async () => {\n  const supabase = await createClient();\n\n  const auth_callback_url = `${process.env.SITE_URL}/auth/callback`;\n\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider,\n    options: {\n      redirectTo: auth_callback_url,\n    },\n  });\n\n  console.log(data);\n\n  if (error) {\n    console.log(error);\n  }\n\n  if (data.url !== null) {\n    redirect(data.url);\n  }\n};\n\nexport const signinWithGoogle = signInWith(\"google\");\n"],"names":[],"mappings":";;;;;;;IAOsB;IAoBA;IA2CT"}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["file:///Users/main/it/Clix-Web/automation/src/app/auth/page.tsx"],"sourcesContent":["\"use client\"\n\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { login, signinWithGoogle, signup } from \"../login/actions\";\n\nconst formSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords must match\",\n  path: [\"confirmPassword\"],\n});\n\ntype FormValues = z.infer<typeof formSchema>;\n\nexport default function RegisterForm() {\n  const {\n    register,\n    formState: { errors },\n  } = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n  });\n\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\">\n      <form\n        className=\"w-full max-w-md p-6 bg-white shadow-md rounded-md\"\n      >\n        <h2 className=\"text-2xl font-bold text-center mb-6\">Register</h2>\n\n        {/* Email Field */}\n        <div className=\"mb-4\">\n          <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700\">\n            Email\n          </label>\n          <input\n            id=\"email\"\n            type=\"email\"\n            {...register(\"email\")}\n            className={`mt-1 w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${\n              errors.email ? \"border-red-500 focus:ring-red-500\" : \"focus:ring-blue-500\"\n            }`}\n          />\n          {errors.email && (\n            <p className=\"mt-1 text-sm text-red-500\">{errors.email.message}</p>\n          )}\n        </div>\n\n        {/* Password Field */}\n        <div className=\"mb-4\">\n          <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700\">\n            Password\n          </label>\n          <input\n            id=\"password\"\n            type=\"password\"\n            {...register(\"password\")}\n            className={`mt-1 w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 ${\n              errors.password ? \"border-red-500 focus:ring-red-500\" : \"focus:ring-blue-500\"\n            }`}\n          />\n          {errors.password && (\n            <p className=\"mt-1 text-sm text-red-500\">{errors.password.message}</p>\n          )}\n        </div>\n\n       \n        <button\n          type=\"submit\"\n          className=\"w-full py-2 px-4 text-white bg-blue-500 mb-2 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          formAction={login}\n        >\n           Login\n        </button>\n        <button\n          type=\"submit\"\n          className=\"w-full py-2 px-4 text-white bg-blue-500 mb-2 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          formAction={signup}\n        >\n           Sign in\n        </button>\n        <button\n          type=\"submit\"\n          className=\"w-full py-2 px-4 text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500\"\n          formAction={signinWithGoogle}\n        >\n           Google\n        </button>\n      </form>\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;AAKA;AACA;AAFA;AADA;;;AAHA;;;;;AAQA,MAAM,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;IACxB,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC5B,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM;AAC3B,GAAG,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK,KAAK,eAAe,EAAE;IAC1D,SAAS;IACT,MAAM;QAAC;KAAkB;AAC3B;AAIe,SAAS;;IACtB,MAAM,EACJ,QAAQ,EACR,WAAW,EAAE,MAAM,EAAE,EACtB,GAAG,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAAc;QACtB,UAAU,CAAA,GAAA,iKAAA,CAAA,cAAW,AAAD,EAAE;IACxB;IAGA,qBACE,6LAAC;QAAI,WAAU;kBACb,cAAA,6LAAC;YACC,WAAU;;8BAEV,6LAAC;oBAAG,WAAU;8BAAsC;;;;;;8BAGpD,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAM,SAAQ;4BAAQ,WAAU;sCAA0C;;;;;;sCAG3E,6LAAC;4BACC,IAAG;4BACH,MAAK;4BACJ,GAAG,SAAS,QAAQ;4BACrB,WAAW,CAAC,wEAAwE,EAClF,OAAO,KAAK,GAAG,sCAAsC,uBACrD;;;;;;wBAEH,OAAO,KAAK,kBACX,6LAAC;4BAAE,WAAU;sCAA6B,OAAO,KAAK,CAAC,OAAO;;;;;;;;;;;;8BAKlE,6LAAC;oBAAI,WAAU;;sCACb,6LAAC;4BAAM,SAAQ;4BAAW,WAAU;sCAA0C;;;;;;sCAG9E,6LAAC;4BACC,IAAG;4BACH,MAAK;4BACJ,GAAG,SAAS,WAAW;4BACxB,WAAW,CAAC,wEAAwE,EAClF,OAAO,QAAQ,GAAG,sCAAsC,uBACxD;;;;;;wBAEH,OAAO,QAAQ,kBACd,6LAAC;4BAAE,WAAU;sCAA6B,OAAO,QAAQ,CAAC,OAAO;;;;;;;;;;;;8BAKrE,6LAAC;oBACC,MAAK;oBACL,WAAU;oBACV,YAAY,iIAAA,CAAA,QAAK;8BAClB;;;;;;8BAGD,6LAAC;oBACC,MAAK;oBACL,WAAU;oBACV,YAAY,iIAAA,CAAA,SAAM;8BACnB;;;;;;8BAGD,6LAAC;oBACC,MAAK;oBACL,WAAU;oBACV,YAAY,iIAAA,CAAA,mBAAgB;8BAC7B;;;;;;;;;;;;;;;;;AAMT;GA7EwB;;QAIlB,iKAAA,CAAA,UAAO;;;KAJW"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}